{% extends "template/main.twig" %}
{% block title %}
Todo - The Example
{% endblock %}
{% block head %}
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
<style type="text/css">
    .noselect {
        user-select: none; 
    }
    .toast {
        width:70%;
    }
    .loader {
        display: inline-block;
        width: 2rem;
        height: 2rem;
        vertical-align: text-bottom;
        background-color: currentColor;
        transform: scale(0);
        opacity:0;
        border-radius: 50%;
        -webkit-animation: loader .5s linear alternate infinite;
        animation: loader .5s linear alternate infinite;
    }

    @keyframes loader {
        0% {
            transform: scale(0);
            opacity:0
        }
        100%{
            transform: scale(0.5);
            opacity:1;
        }
    }
    .delay-1{
        animation-delay:0.1s
    }
    .delay-2{
        animation-delay:0.2s
    }
    .delay-3{
        animation-delay:0.3s
    }
    .loading {
        position:absolute;
        width:100%;
        height:100%;
        background-color:rgba(255,255,255,0.4);
        display:flex;
        align-items:center;
        justify-content:center;
    }
    .todoList {
        list-style:none;
        padding-left:0;
    }
    .todoList li {
        padding:0.3rem 0.6rem;
        cursor:pointer;
        display:flex;
    }
    .todoList li span.icon-left{
        color:#05ba20;
        padding-right:0.6rem;
    }
    .todoList li span.label{
        width:100%;
    }
    .todoList li span.action{
        padding-left:0.4rem;
    }
    .todoList li.incomplete {
        background-color:#f7f8f9;
    }
    .todoList li.complete {
        background-color:#eaf9f4;
    }
</style>
{% endblock %}
{% block content %}
<div class="container py-3">
    <h2>Todo - The Example App</h2>
    <p>
        This vue.js Todo app is an example CRUD system that utilizes API routes in the back end which implements Doctrine ORM underneath. Add or remove Todo items or double-click any item to toggle its complete status. You may find more about using any pre-bundled packages within this scaffolding in the <a href="https://github.com/infinitycube/quicksite/wiki" target="_blank">QuickSite Documentation</a>.
    </p>
</div>
<div class="container py-3">
    <div class="row justify-content-center m-3">
        <div class="col-md-5">
            <div id="app">
                <div class="loading" v-show="confirm">
                    <div class="toast" id="alert-confirm" role="alert" aria-live="assertive" aria-atomic="true"  data-autohide="false">
                        <div class="toast-header">
                            <i class="fa fa-list-ul" aria-hidden="true"></i>
                            <strong class="mr-auto pl-2">Todo</strong>
                            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="toast-body">
                            <div class="mb-2">
                                You are about to remove this todo item. <br>
                                Do you wish to continue? 
                            </div>
                            <div class="d-flex justify-content-end">
                                <span>
                                    <button type="button" data-dismiss="toast" class="btn btn-sm btn-secondary">No</button>
                                    <button type="button" data-dismiss="toast" class="btn btn-sm btn-primary" @click="removeTodoItem()">Yes</button>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="loading" v-show="info">
                    <div class="toast" id="alert-info" role="alert" aria-live="assertive" aria-atomic="true"  data-delay="5000">
                        <div class="toast-header">
                            <i class="fa fa-list-ul" aria-hidden="true"></i>
                            <strong class="mr-auto pl-2">Todo</strong>
                            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="toast-body">
                            {{"{{messageText}}"}}
                        </div>
                    </div>
                </div>
                <div class="loading" v-if="fetching">
                  <div class="loader text-success" role="status"></div>
                  <div class="loader text-primary delay-1" role="status"></div>
                  <div class="loader text-warning delay-2" role="status"></div>
                  <div class="loader text-danger delay-3" role="status"></div>
                  <span class="sr-only">Loading...</span>
                </div>
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a class="nav-link" :class="{ active: activeTab === 1 }" @click.prevent.stop="changeTab(1)" href="#"><i class="fa fa-list-ul" aria-hidden="true"></i> Todo</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" :class="{ active: activeTab === 2 }" @click.prevent.stop="changeTab(2)" href="#"><i class="fa fa-plus" aria-hidden="true"></i> New</a>
                    </li>
                </ul>
                <div class="my-2" v-show="activeTab === 1">
                   <ul class="todoList">
                    <li v-for="(item, index) in todoList" class="mb-2 noselect" :class="item.status? 'complete':'incomplete'" @dblclick="toggleStatus(item.id)">
                        <span class="icon-left">
                            <i v-if="item.status" class="fa fa-check-circle" aria-hidden="true"></i>
                            <i v-else class="fa fa-circle" aria-hidden="true"></i>
                        </span>
                        <span class="label">{{"{{item.text}}"}}</span> <!-- Use Vue Double Mustache within quotes inside a Twig Double Mustache to avoid Tiwg considering Vue code as it's own -->
                        <span class="actions">
                            <a class="text-danger" type="button" @click.prevent="confirmRemove(item.id)" href="#"><i class="fa fa-trash" aria-hidden="true"></i></a>
                        </span>
                    </li>
                   </ul>
                   <p v-if="todoList.length === 0">Please add a todo items</p>
                </div>
                <div class="my-2" v-show="activeTab === 2">
                  <p>Add a Todo Item<p>
                  <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Todo Item" aria-label="Todo Item" aria-describedby="button-addon" v-model="newItem" @keyup.enter="addTodoItem()">
                    <div class="input-group-append">
                        <button class="btn btn-success" type="button" id="button-addon" @click="addTodoItem()"><i class="fa fa-plus" aria-hidden="true"></i></button>
                    </div>
                  </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
{% block scripts %}
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.11"></script>
<script>
   var vm = new Vue({
       el: '#app',
       data: {
            todoList:[],
            activeTab:1,
            newItem:'',
            fetching:false,
            confirm:false,
            info:false,
            delid:0,
            messageText:''
       },
       methods:{
           changeTab(tabId){
               this.activeTab = tabId;
           },
           populateTodo(){
               this.fetching = true;
               fetch('/api/todos', {
                   method:'GET'
               })
               .then(response => response.json())
               .then(db => {
                   this.todoList = db.data;
                   this.fetching = false;
               }).catch(error => {
                   alert(error.message);
                   this.fetching = false;
               })
           },
           addTodoItem(){
               if(this.newItem.length > 1){
                this.fetching = true;
                fetch('/api/todos', {
                    method:'POST',headers: {
                     'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                     'task':this.newItem
                    })
                })
                .then(response => response.json())
                .then(db => {
                    this.newItem = '';
                    this.activeTab = 1;
                    this.showAlert(db.message);
                    this.populateTodo();
                }).catch(error => {
                    this.showAlert(error.message);
                    this.fetching = false;
                })
               }
           },
           confirmRemove(id){
               this.delid = id;
               this.confirm = true;
               $('#alert-confirm').toast('show');
           },
           removeTodoItem(){
               if(this.delid){
                this.fetching = true;
                fetch('/api/todos', {
                    method:'DELETE',headers: {
                        'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                        'taskId':this.delid
                        })
                })
                .then(response => response.json())
                .then(db => {
                    this.showAlert(db.message);
                    this.populateTodo();
                }).catch(error => {
                    this.showAlert(error.message);
                    this.fetching = false;
                })
               }
           },
           toggleStatus(id){
               this.fetching = true;
               fetch('/api/todos/status', {
                   method:'POST',headers: {
                     'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                     'taskId':id
                    })
               })
               .then(response => response.json())
               .then(db => {
                  this.populateTodo();
               }).catch(error => {
                  this.showAlert(error.message);
                  this.fetching = false;
               })
           },
           showAlert(message){
               this.info = true;
               this.messageText = message;
               $('#alert-info').toast('show');
           }
       },
       created: function(){
           this.populateTodo();
       }
   });
$('#alert-info').on('hidden.bs.toast', function () {
  vm.$data.info = false;
  vm.$data.messageText = '';
});
$('#alert-confirm').on('hidden.bs.toast', function () {
  vm.$data.confirm = false;
  vm.$data.delid = 0;
});
</script>
{% endblock %}